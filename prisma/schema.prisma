// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int      @id @default(autoincrement())
  fullname             String
  username             String   @unique
  bio                  String?
  profile_image_url    String?
  phone                String?  @unique
  email                String   @unique
  hashed_password      String
  hashed_refresh_token String?
  is_active            Boolean? @default(false)
  activation_link      String?  @unique @default(uuid())

  videos        Video[]
  comments      Comment[]
  likes         Like[]
  watchHistory  Watch_History[]
  savedVideos   Saved_Video[]
  playlists     Playlist[]
  notifications Notification[]
  followers     Follower[]      @relation("UserFollower")
  followings    Follower[]      @relation("UserFollowing")
  reports       Report[]
  bannedUsers         Banned_User[] @relation("BannedUsers")
  bannedBy         Banned_User[]  @relation("BannedBy")

  @@map("users")
}

model Admin {
  id                   Int     @id @default(autoincrement())
  fullname             String
  username             String  @unique
  profile_image_url    String?
  phone                String? @unique
  email                String  @unique
  hashed_password      String
  hashed_refresh_token String?
  is_creator           Boolean @default(false)
  is_active            Boolean @default(true)

  @@map("admins")
}

model Video {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  video_url     String
  thumbnail_url String
  duration      String
  views         Int      @default(0)
  created_at    DateTime @default(now())

  userId        Int
  user          User             @relation(fields: [userId], references: [id])
  comments      Comment[]
  likes         Like[]
  watchHistory  Watch_History[]
  notifications Notification[]
  savedVideos   Saved_Video[]
  playlistItems Playlist_Video[]
  reports       Report[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String?
  texted_at DateTime @default(now())

  userId  Int
  user    User  @relation(fields: [userId], references: [id])
  videoId Int
  video   Video @relation(fields: [videoId], references: [id])
}

model Like {
  id      Int @id @default(autoincrement())
  is_like Int @default(0)

  userId  Int
  user    User  @relation(fields: [userId], references: [id])
  videoId Int
  video   Video @relation(fields: [videoId], references: [id])
}

model Watch_History {
  id             Int      @id @default(autoincrement())
  watched_at     DateTime @default(now())
  watch_duration String

  userId  Int
  user    User  @relation(fields: [userId], references: [id])
  videoId Int
  video   Video @relation(fields: [videoId], references: [id])
}

model Saved_Video {
  id       Int      @id @default(autoincrement())
  userId   Int
  videoId  Int
  saved_at DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  video Video @relation(fields: [videoId], references: [id])
}

model Playlist {
  id              Int              @id @default(autoincrement())
  userId          Int
  name            String
  description     String?
  created_at      DateTime         @default(now())
  playlist_videos Playlist_Video[]

  user User @relation(fields: [userId], references: [id])
}

model Playlist_Video {
  id         Int @id @default(autoincrement())
  playlistId Int
  videoId    Int
  position   Int @default(0)

  playlist Playlist @relation(fields: [playlistId], references: [id])
  video    Video    @relation(fields: [videoId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  is_read   Boolean  @default(false)
  createdAt DateTime @default(now())

  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  video   Video? @relation(fields: [videoId], references: [id])
  videoId Int? // optional bo'lishi mumkin
}

model Follower {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollower", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingId], references: [id])
}

model Report {
  id          Int          @id @default(autoincrement())
  reportedBy  Int
  videoId     Int
  reason      String
  reported_at DateTime     @default(now())
  status      ReportStatus

  reporter User  @relation(fields: [reportedBy], references: [id])
  video    Video @relation(fields: [videoId], references: [id])
}

model Banned_User {
  id         Int       @id @default(autoincrement())
  userId     Int
  reason     String
  banned_at  DateTime  @default(now())
  expires_at DateTime?
  bannedBy Int

  user User  @relation("BannedUsers", fields: [userId], references: [id])
  admin User  @relation("BannedBy", fields: [bannedBy], references: [id])
}

enum ReportStatus {
  PENDING
  REVIEWED
  BLOCKED
  DISMISSED
}
